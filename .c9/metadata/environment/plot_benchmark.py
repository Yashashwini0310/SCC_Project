{"filter":false,"title":"plot_benchmark.py","tooltip":"/plot_benchmark.py","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":0,"column":0},"end":{"row":22,"column":0},"action":"insert","lines":["import pandas as pd","import matplotlib.pyplot as plt","","# Read the benchmark CSV file","df = pd.read_csv(\"benchmark_results.csv\")","","# Group by method and calculate average execution time","avg_times = df.groupby(\"Method\")[\"ExecutionTimeSec\"].mean().reset_index()","","# Plotting the bar chart","plt.figure(figsize=(8, 5))","plt.bar(avg_times[\"Method\"], avg_times[\"ExecutionTimeSec\"], color=[\"skyblue\", \"orange\", \"green\"])","","plt.title(\"Benchmark Comparison: MapReduce vs Spark Streaming vs Hybrid Parallelism\")","plt.xlabel(\"Method\")","plt.ylabel(\"Average Execution Time (sec)\")","plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)","","# Save the plot","plt.tight_layout()","plt.savefig(\"benchmark_comparison.png\")","plt.show()",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":22,"column":0},"action":"remove","lines":["import pandas as pd","import matplotlib.pyplot as plt","","# Read the benchmark CSV file","df = pd.read_csv(\"benchmark_results.csv\")","","# Group by method and calculate average execution time","avg_times = df.groupby(\"Method\")[\"ExecutionTimeSec\"].mean().reset_index()","","# Plotting the bar chart","plt.figure(figsize=(8, 5))","plt.bar(avg_times[\"Method\"], avg_times[\"ExecutionTimeSec\"], color=[\"skyblue\", \"orange\", \"green\"])","","plt.title(\"Benchmark Comparison: MapReduce vs Spark Streaming vs Hybrid Parallelism\")","plt.xlabel(\"Method\")","plt.ylabel(\"Average Execution Time (sec)\")","plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)","","# Save the plot","plt.tight_layout()","plt.savefig(\"benchmark_comparison.png\")","plt.show()",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":22,"column":0},"action":"insert","lines":["import pandas as pd","import matplotlib.pyplot as plt","","# Read the benchmark CSV file","df = pd.read_csv(\"benchmark_results.csv\")","","# Group by method and calculate average execution time","avg_times = df.groupby(\"Method\")[\"ExecutionTimeSec\"].mean().reset_index()","","# Plotting the bar chart","plt.figure(figsize=(8, 5))","plt.bar(avg_times[\"Method\"], avg_times[\"ExecutionTimeSec\"], color=[\"skyblue\", \"orange\", \"green\"])","","plt.title(\"Benchmark Comparison: MapReduce vs Spark Streaming vs Hybrid Parallelism\")","plt.xlabel(\"Method\")","plt.ylabel(\"Average Execution Time (sec)\")","plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)","","# Save the plot","plt.tight_layout()","plt.savefig(\"benchmark_comparison.png\")","plt.show()",""]}],[{"start":{"row":1,"column":31},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":2,"column":0},"end":{"row":2,"column":1},"action":"insert","lines":["i"]},{"start":{"row":2,"column":1},"end":{"row":2,"column":2},"action":"insert","lines":["m"]},{"start":{"row":2,"column":2},"end":{"row":2,"column":3},"action":"insert","lines":["p"]},{"start":{"row":2,"column":3},"end":{"row":2,"column":4},"action":"insert","lines":["o"]},{"start":{"row":2,"column":4},"end":{"row":2,"column":5},"action":"insert","lines":["r"]},{"start":{"row":2,"column":5},"end":{"row":2,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":[" "],"id":4},{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["c"]},{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["s"]},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["v"]}],[{"start":{"row":2,"column":10},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":9,"column":73},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":6}],[{"start":{"row":10,"column":0},"end":{"row":11,"column":67},"action":"insert","lines":["for i, val in enumerate(avg_times[\"ExecutionTimeSec\"]):","    plt.text(i, val + 0.1, f\"{val:.2f}s\", ha='center', va='bottom')"],"id":7}],[{"start":{"row":21,"column":0},"end":{"row":21,"column":23},"action":"insert","lines":["plt.xticks(rotation=10)"],"id":8}],[{"start":{"row":26,"column":0},"end":{"row":27,"column":0},"action":"insert","lines":["",""],"id":9}],[{"start":{"row":27,"column":0},"end":{"row":34,"column":112},"action":"insert","lines":["# ‚úÖ Calculate and display percentage improvement","try:","    parallel = avg_times[avg_times[\"Method\"] == \"HybridParallel\"][\"ExecutionTimeSec\"].values[0]","    sequential = avg_times[avg_times[\"Method\"] == \"HybridSequential\"][\"ExecutionTimeSec\"].values[0]","    improvement = ((sequential - parallel) / sequential) * 100","    print(f\"\\nüöÄ Parallelism improved performance by {improvement:.2f}% compared to sequential execution.\")","except IndexError:","    print(\"\\n‚ö†Ô∏è Make sure both 'HybridParallel' and 'HybridSequential' methods exist in benchmark_results.csv.\")"],"id":10}],[{"start":{"row":27,"column":5},"end":{"row":27,"column":6},"action":"remove","lines":["a"],"id":11},{"start":{"row":27,"column":4},"end":{"row":27,"column":5},"action":"remove","lines":["C"]},{"start":{"row":27,"column":3},"end":{"row":27,"column":4},"action":"remove","lines":[" "]},{"start":{"row":27,"column":2},"end":{"row":27,"column":3},"action":"remove","lines":["‚úÖ"]}],[{"start":{"row":27,"column":2},"end":{"row":27,"column":3},"action":"insert","lines":["C"],"id":12},{"start":{"row":27,"column":3},"end":{"row":27,"column":4},"action":"insert","lines":["a"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":8,"column":42},"end":{"row":8,"column":42},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":74,"mode":"ace/mode/python"}},"timestamp":1750186340127,"hash":"6c5bed1211347b88a5d035ba6b20bc3be765394c"}