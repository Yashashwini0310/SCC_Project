{"filter":false,"title":"hybrid_sequential.py","tooltip":"/hybrid_sequential.py","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":53,"column":0},"action":"insert","lines":["import subprocess","import time","from benchmark_logger_csv import log_to_csv","import boto3","import botocore.exceptions","","def push_custom_metric(metric_name, value):","    cloudwatch = boto3.client('cloudwatch')","    try:","        cloudwatch.put_metric_data(","            Namespace='IMDbHybridBenchmark',","            MetricData=[","                {","                    'MetricName': metric_name,","                    'Dimensions': [{'Name': 'Application', 'Value': 'IMDbHybridSequential'}],","                    'Value': value,","                    'Unit': 'Seconds'","                },","            ]","        )","        print(f\"[CloudWatch] Pushed {metric_name}: {value:.2f} sec\")","    except botocore.exceptions.ClientError as e:","        print(\"[CloudWatch Error]\", e)","","def run_mapreduce():","    print(\"[Sequential] Running MapReduce...\")","    start = time.time()","    subprocess.run([\"python3\", \"sentiment_multiprocessing.py\"])","    duration = time.time() - start","    log_to_csv(\"MapReduce\", duration)","    print(f\"[Sequential] MapReduce finished in {duration:.2f} sec\")","    return duration","","def run_spark():","    print(\"[Sequential] Running Spark Streaming...\")","    start = time.time()","    subprocess.run([\"spark-submit\", \"spark_streaming.py\"])","    duration = time.time() - start","    log_to_csv(\"SparkStreaming\", duration)","    print(f\"[Sequential] Spark Streaming finished in {duration:.2f} sec\")","    return duration","","if __name__ == \"__main__\":","    print(\"[Sequential] Running in sequential mode...\")","    start_time = time.time()","","    map_time = run_mapreduce()","    spark_time = run_spark()","","    total_time = time.time() - start_time","    log_to_csv(\"HybridSequential\", total_time)","    print(f\"[Sequential] Total sequential execution time: {total_time:.2f} sec\")","    push_custom_metric(\"TotalSequentialExecutionTime\", total_time)",""],"id":1}],[{"start":{"row":27,"column":62},"end":{"row":27,"column":63},"action":"insert","lines":[","],"id":2}],[{"start":{"row":27,"column":63},"end":{"row":27,"column":64},"action":"insert","lines":[" "],"id":3},{"start":{"row":27,"column":64},"end":{"row":27,"column":65},"action":"insert","lines":["c"]},{"start":{"row":27,"column":65},"end":{"row":27,"column":66},"action":"insert","lines":["h"]},{"start":{"row":27,"column":66},"end":{"row":27,"column":67},"action":"insert","lines":["e"]},{"start":{"row":27,"column":67},"end":{"row":27,"column":68},"action":"insert","lines":["c"]}],[{"start":{"row":27,"column":67},"end":{"row":27,"column":68},"action":"remove","lines":["c"],"id":4},{"start":{"row":27,"column":66},"end":{"row":27,"column":67},"action":"remove","lines":["e"]},{"start":{"row":27,"column":65},"end":{"row":27,"column":66},"action":"remove","lines":["h"]},{"start":{"row":27,"column":64},"end":{"row":27,"column":65},"action":"remove","lines":["c"]},{"start":{"row":27,"column":63},"end":{"row":27,"column":64},"action":"remove","lines":[" "]},{"start":{"row":27,"column":62},"end":{"row":27,"column":63},"action":"remove","lines":[","]}]]},"ace":{"folds":[],"scrolltop":254.99999999999997,"scrollleft":0,"selection":{"start":{"row":29,"column":37},"end":{"row":29,"column":37},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":0,"state":"start","mode":"ace/mode/python"}},"timestamp":1750162556995,"hash":"146cdeee4f276fe0f5327fc6a2c31be7652b4513"}