{"filter":false,"title":"sentiment_multiprocessing.py","tooltip":"/sentiment_multiprocessing.py","undoManager":{"mark":13,"position":13,"stack":[[{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["import os","from multiprocessing import Pool, cpu_count","from textblob import TextBlob","import boto3","","# === CONFIG ===","input_dirs = [\"reduced_imdb/pos\", \"reduced_imdb/neg\"]","output_file = \"sentiment_mapreduce_output.txt\"","bucket_name = \"your-s3-bucket-name\"  # <-- Replace with your bucket","s3_key = \"results/\" + output_file","","# === TASK ===","def analyze_file(file_path):","    try:","        with open(file_path, 'r', encoding='utf-8') as f:","            text = f.read()","        sentiment = TextBlob(text).sentiment.polarity","        return (file_path, \"positive\" if sentiment > 0 else \"negative\")","    except Exception as e:","        return (file_path, \"error\")","","# === COLLECT ALL FILES ===","def collect_all_files():","    files = []","    for dir_path in input_dirs:","        for file in os.listdir(dir_path):","            full_path = os.path.join(dir_path, file)","            if os.path.isfile(full_path):","                files.append(full_path)","    return files","","# === MAIN ===","if __name__ == \"__main__\":","    files = collect_all_files()","    print(f\"Processing {len(files)} files using {cpu_count()} cores...\")","","    with Pool(cpu_count()) as p:","        results = p.map(analyze_file, files)","","    # Aggregate Results","    positive = sum(1 for _, label in results if label == \"positive\")","    negative = sum(1 for _, label in results if label == \"negative\")","    error = sum(1 for _, label in results if label == \"error\")","","    with open(output_file, \"w\") as f:","        f.write(f\"Total Files: {len(results)}\\n\")","        f.write(f\"Positive Reviews: {positive}\\n\")","        f.write(f\"Negative Reviews: {negative}\\n\")","        f.write(f\"Errors: {error}\\n\")","","    print(\"Analysis complete. Uploading to S3...\")","","    # Upload to S3","    s3 = boto3.client('s3')","    s3.upload_file(output_file, bucket_name, s3_key)","    print(f\"Uploaded to S3://{bucket_name}/{s3_key}\")",""],"id":1}],[{"start":{"row":8,"column":15},"end":{"row":8,"column":34},"action":"remove","lines":["your-s3-bucket-name"],"id":2},{"start":{"row":8,"column":15},"end":{"row":8,"column":35},"action":"insert","lines":["imdb-text-processing"]}],[{"start":{"row":8,"column":38},"end":{"row":8,"column":68},"action":"remove","lines":["# <-- Replace with your bucket"],"id":3}],[{"start":{"row":0,"column":9},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":1,"column":0},"end":{"row":1,"column":1},"action":"insert","lines":["i"]},{"start":{"row":1,"column":1},"end":{"row":1,"column":2},"action":"insert","lines":["m"]},{"start":{"row":1,"column":2},"end":{"row":1,"column":3},"action":"insert","lines":["p"]},{"start":{"row":1,"column":3},"end":{"row":1,"column":4},"action":"insert","lines":["o"]},{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":["t"]},{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":["y"]}],[{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"remove","lines":["y"],"id":5},{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"remove","lines":["t"]}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":["r"],"id":6},{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"insert","lines":[" "],"id":7},{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"insert","lines":["t"]},{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["i"]},{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"insert","lines":["m"]},{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":["e"]}],[{"start":{"row":12,"column":6},"end":{"row":12,"column":10},"action":"remove","lines":["TASK"],"id":8},{"start":{"row":12,"column":6},"end":{"row":12,"column":7},"action":"insert","lines":["M"]},{"start":{"row":12,"column":7},"end":{"row":12,"column":8},"action":"insert","lines":["A"]},{"start":{"row":12,"column":8},"end":{"row":12,"column":9},"action":"insert","lines":["P"]}],[{"start":{"row":12,"column":9},"end":{"row":12,"column":10},"action":"insert","lines":[" "],"id":9},{"start":{"row":12,"column":10},"end":{"row":12,"column":11},"action":"insert","lines":["T"]},{"start":{"row":12,"column":11},"end":{"row":12,"column":12},"action":"insert","lines":["A"]},{"start":{"row":12,"column":12},"end":{"row":12,"column":13},"action":"insert","lines":["S"]}],[{"start":{"row":12,"column":13},"end":{"row":12,"column":14},"action":"insert","lines":["K"],"id":10}],[{"start":{"row":33,"column":26},"end":{"row":34,"column":0},"action":"insert","lines":["",""],"id":11},{"start":{"row":34,"column":0},"end":{"row":34,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":34,"column":4},"end":{"row":34,"column":28},"action":"insert","lines":["start_time = time.time()"],"id":12}],[{"start":{"row":0,"column":0},"end":{"row":58,"column":0},"action":"remove","lines":["import os","import time","from multiprocessing import Pool, cpu_count","from textblob import TextBlob","import boto3","","# === CONFIG ===","input_dirs = [\"reduced_imdb/pos\", \"reduced_imdb/neg\"]","output_file = \"sentiment_mapreduce_output.txt\"","bucket_name = \"imdb-text-processing\"  ","s3_key = \"results/\" + output_file","","# === MAP TASK ===","def analyze_file(file_path):","    try:","        with open(file_path, 'r', encoding='utf-8') as f:","            text = f.read()","        sentiment = TextBlob(text).sentiment.polarity","        return (file_path, \"positive\" if sentiment > 0 else \"negative\")","    except Exception as e:","        return (file_path, \"error\")","","# === COLLECT ALL FILES ===","def collect_all_files():","    files = []","    for dir_path in input_dirs:","        for file in os.listdir(dir_path):","            full_path = os.path.join(dir_path, file)","            if os.path.isfile(full_path):","                files.append(full_path)","    return files","","# === MAIN ===","if __name__ == \"__main__\":","    start_time = time.time()","    files = collect_all_files()","    print(f\"Processing {len(files)} files using {cpu_count()} cores...\")","","    with Pool(cpu_count()) as p:","        results = p.map(analyze_file, files)","","    # Aggregate Results","    positive = sum(1 for _, label in results if label == \"positive\")","    negative = sum(1 for _, label in results if label == \"negative\")","    error = sum(1 for _, label in results if label == \"error\")","","    with open(output_file, \"w\") as f:","        f.write(f\"Total Files: {len(results)}\\n\")","        f.write(f\"Positive Reviews: {positive}\\n\")","        f.write(f\"Negative Reviews: {negative}\\n\")","        f.write(f\"Errors: {error}\\n\")","","    print(\"Analysis complete. Uploading to S3...\")","","    # Upload to S3","    s3 = boto3.client('s3')","    s3.upload_file(output_file, bucket_name, s3_key)","    print(f\"Uploaded to S3://{bucket_name}/{s3_key}\")",""],"id":13},{"start":{"row":0,"column":0},"end":{"row":83,"column":0},"action":"insert","lines":["import os","import time","from multiprocessing import Pool, cpu_count","from textblob import TextBlob","import boto3","","try:","    import psutil  # Optional: for CPU usage","    use_psutil = True","except ImportError:","    use_psutil = False","","# === CONFIG ===","input_dirs = [\"reduced_imdb/pos\", \"reduced_imdb/neg\"]","output_file = \"sentiment_mapreduce_output.txt\"","bucket_name = \"imdb-text-processing\"","s3_key = \"results/\" + output_file","","# === MAP PHASE ===","def analyze_file(file_path):","    try:","        with open(file_path, 'r', encoding='utf-8') as f:","            text = f.read()","        sentiment = TextBlob(text).sentiment.polarity","        return (file_path, \"positive\" if sentiment > 0 else \"negative\")","    except Exception:","        return (file_path, \"error\")","","# === FILE GATHERING ===","def collect_all_files():","    files = []","    for dir_path in input_dirs:","        for file in os.listdir(dir_path):","            full_path = os.path.join(dir_path, file)","            if os.path.isfile(full_path):","                files.append(full_path)","    return files","","# === MAIN ===","if __name__ == \"__main__\":","    start_time = time.time()","","    files = collect_all_files()","    print(f\"[INFO] Files to process: {len(files)}\")","    print(f\"[INFO] Using {cpu_count()} CPU cores\")","","    if use_psutil:","        print(f\"[INFO] Initial CPU usage: {psutil.cpu_percent()}%\")","","    print(\"[MAP] Starting sentiment analysis...\")","    with Pool(cpu_count()) as p:","        results = p.map(analyze_file, files)","    print(\"[MAP] Completed.\")","","    # === REDUCE PHASE ===","    print(\"[REDUCE] Aggregating sentiment counts...\")","    positive = sum(1 for _, label in results if label == \"positive\")","    negative = sum(1 for _, label in results if label == \"negative\")","    error = sum(1 for _, label in results if label == \"error\")","    print(\"[REDUCE] Completed.\")","","    # === SAVE PHASE ===","    print(f\"[SAVE] Writing results to {output_file}...\")","    with open(output_file, \"w\") as f:","        f.write(f\"Total Files: {len(results)}\\n\")","        f.write(f\"Positive Reviews: {positive}\\n\")","        f.write(f\"Negative Reviews: {negative}\\n\")","        f.write(f\"Errors: {error}\\n\")","    print(\"[SAVE] Done.\")","","    # === S3 UPLOAD PHASE ===","    print(\"[UPLOAD] Uploading to S3...\")","    s3 = boto3.client('s3')","    s3.upload_file(output_file, bucket_name, s3_key)","    print(f\"[UPLOAD] File uploaded to s3://{bucket_name}/{s3_key}\")","","    # === EXECUTION TIME ===","    end_time = time.time()","    duration = end_time - start_time","    print(f\"[DONE] Execution Time: {duration:.2f} seconds\")","","    if use_psutil:","        print(f\"[INFO] Final CPU usage: {psutil.cpu_percent()}%\")",""]}],[{"start":{"row":7,"column":18},"end":{"row":7,"column":30},"action":"remove","lines":[" # Optional:"],"id":14},{"start":{"row":7,"column":18},"end":{"row":7,"column":19},"action":"insert","lines":["#"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":12,"column":13},"end":{"row":12,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1750104082228,"hash":"bf788e80e1671c27112ad1c2fec6b9b08d34ac8e"}